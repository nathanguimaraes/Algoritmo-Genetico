# -*- coding: utf-8 -*-
"""Algoritmo Genetico - Grade de Horarios.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eysSEUPQ6yckndbbUXYgaHPAny9rKFzP
"""

import random

# Dados das disciplinas e salas
disciplinas = [
    {"codigo": "CC1ICC", "dias": [6, 6, 6], "turno": "T", "horas": [3, 4, 5]},
    {"codigo": "MA3AL", "dias": [3, 3, 3], "turno": "T", "horas": [3, 4, 5]},
    {"codigo": "CC1MBD", "dias": [4, 4, 5, 5], "turno": "T", "horas": [4, 5, 4, 5]},
    {"codigo": "HU1LA", "dias": [2, 2], "turno": "M", "horas": [2, 3]},
    {"codigo": "MA1FM", "dias": [3, 3, 6, 6], "turno": "T", "horas": [1, 2, 1, 2]},
    {"codigo": "MA1LM", "dias": [3, 3, 3], "turno": "T", "horas": [3, 4, 5]},
    {"codigo": "CC1AED1", "dias": [4, 4, 4, 5, 5, 5], "turno": "T", "horas": [1, 2, 3, 1, 2, 3]},
    {"codigo": "CC2CLD", "dias": [3, 3, 3, 3, 5, 5, 5, 5], "turno": "M", "horas": [2, 2, 3, 3, 4, 4, 5, 5]},
    {"codigo": "CC2ER", "dias": [3, 6, 6, 6], "turno": "M", "horas": [1, 3, 4, 5]},
    {"codigo": "CC2POO", "dias": [2, 2, 4, 4], "turno": "M", "horas": [2, 3, 1, 2]},
    {"codigo": "MA2MA", "dias": [3, 3, 4, 4], "turno": "M", "horas": [4, 5, 4, 5]},
    {"codigo": "CC2AED2", "dias": [4, 5, 5, 5], "turno": "M", "horas": [3, 1, 2, 3]},
    {"codigo": "CC3AED3", "dias": [2, 2, 3, 3], "turno": "T", "horas": [1, 2, 1, 2]},
    {"codigo": "CC3AOC", "dias": [4, 4, 4, 5, 5, 5], "turno": "T", "horas": [1, 2, 3, 1, 2, 3]},
    {"codigo": "CC3ES", "dias": [4, 4, 5, 5], "turno": "T", "horas": [4, 5, 4, 5]},
    {"codigo": "MA3AL", "dias": [3, 3, 3], "turno": "T", "horas": [3, 4, 5]},
    {"codigo": "MA3CA", "dias": [2, 2, 6, 6], "turno": "T", "horas": [4, 5, 1, 2]},
    {"codigo": "CC3PI1", "dias": [2, 3, 4, 5, 6, 6, 7, 7, 7, 7, 7, 7], "turno": "T", "horas": [6, 6, 6, 6, 5, 6, 1, 2, 3, 4, 5, 6]},
    {"codigo": "CC4IHC", "dias": [3, 3, 3, 3, 6, 6, 6, 6], "turno": "M", "horas": [2, 2, 3, 3, 1, 1, 2, 2]},
    {"codigo": "CC4PO", "dias": [3, 3, 4, 4], "turno": "M", "horas": [4, 5, 4, 5]},
    {"codigo": "CC4LBD", "dias": [4, 4, 5, 5], "turno": "M", "horas": [1, 2, 4, 5]},
    {"codigo": "CC4RC", "dias": [4, 5, 5, 5], "turno": "M", "horas": [3, 1, 2, 3]},
    {"codigo": "CC4SO", "dias": [5, 5, 6, 6], "turno": "T", "horas": [4, 5, 4, 5]},
    {"codigo": "MA4PE", "dias": [3, 6, 6, 6], "turno": "M", "horas": [1, 3, 4, 5]},
    {"codigo": "CC24A", "dias": [2, 2, 4, 4], "turno": "T", "horas": [2, 3, 2, 3]},
]

salas = ["L10", "L08", "L09", "E09", "L5", "E10", "L4"]
professores = [f"prof{i}" for i in range(1, 12)]

# Parâmetros do algoritmo genético
POPULATION_SIZE = 100
GENERATIONS = 2000
MUTATION_RATE = 0.01

# Representação de um indivíduo como um dicionário de horários
def create_individual():
    return {d["codigo"]: {"codigo": d["codigo"], "dias": d["dias"], "turno": d["turno"], "horas": d["horas"], "sala": random.choice(salas), "professor": random.choice(professores)} for d in disciplinas}

# Função de aptidão: penaliza conflitos de horários e salas, e excesso de horas dos professores
def fitness(individual):
    score = 0
    horario_ocupado = {}
    horas_professores = {prof: 0 for prof in professores}

    for disc in individual.values():
        for dia, hora in zip(disc["dias"], disc["horas"]):
            chave = (dia, disc["turno"], hora, disc["sala"])
            if chave in horario_ocupado:
                score -= 1  # Penaliza conflitos de sala
            else:
                horario_ocupado[chave] = disc["codigo"]
            horas_professores[disc["professor"]] += 1
            if horas_professores[disc["professor"]] > 40:
                score -= (horas_professores[disc["professor"]] - 40)  # Penaliza excesso de horas do professor
    return score

# Seleção por torneio
def tournament_selection(population):
    best = random.choice(population)
    for _ in range(2):  # Torneio de tamanho 3
        ind = random.choice(population)
        if fitness(ind) > fitness(best):
            best = ind
    return best

# Crossover: troca de disciplinas entre dois indivíduos
def crossover(parent1, parent2):
    child = {}
    for key in parent1.keys():
        if random.random() > 0.5:
            child[key] = parent1[key]
        else:
            child[key] = parent2[key]
    return child

# Mutação: modifica aleatoriamente um horário, sala ou professor de uma disciplina
def mutate(individual):
    for disc in individual.values():
        if random.random() < MUTATION_RATE:
            i = random.randint(0, len(disc["dias"]) - 1)
            disc["horas"][i] = random.randint(1, 6)  # Hora aleatória
            disc["dias"][i] = random.randint(2, 6)  # Dia aleatório
            disc["sala"] = random.choice(salas)  # Sala aleatória
            disc["professor"] = random.choice(professores)  # Professor aleatório

# Algoritmo Genético
def genetic_algorithm():
    population = [create_individual() for _ in range(POPULATION_SIZE)]
    for generation in range(GENERATIONS):
        new_population = []
        for _ in range(POPULATION_SIZE):
            parent1 = tournament_selection(population)
            parent2 = tournament_selection(population)
            child = crossover(parent1, parent2)
            mutate(child)
            new_population.append(child)
        population = new_population
        best_individual = max(population, key=fitness)
        print(f"Generation {generation}: Best Fitness = {fitness(best_individual)}")
    return best_individual

# Executa o algoritmo genético
best_schedule = genetic_algorithm()
print("Melhor grade de horários encontrada:")
for codigo, horario in best_schedule.items():
    print(f"{codigo}: Dias {horario['dias']} Turno {horario['turno']} Horas {horario['horas']} Sala {horario['sala']} Professor {horario['professor']}")